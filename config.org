#+TITLE: Emacs Configuration
#+AUTHOR: John Allen

* Packages
** Add Package Repos

#+begin_src emacs-lisp :tangle yes
(require 'package)
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+end_src

** Install use-package
  use-package is a really great way of managing and configuring your
  packages.
  1) deferred loading, faster startup
  2) dependency declaration is configuration
     I never include packages that I never use

#+begin_src emacs-lisp :tangle yes
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
 '(use-package diminish bind-key delight))
#+end_src

** Trigger use-package
   And force the install of missing packages.
#+begin_src emacs-lisp :tangle yes
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
(require 'delight)
(setq use-package-always-ensure t)
#+end_src

** Legacy Packages
   These packages are declared upfront and configured elsewhere. These
   will be converted to use-package

#+begin_src emacs-lisp :tangle yes
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; install the missing packages
(defvar package-list
  '(
    lsp-mode
    lsp-python

    js2-mode
    ag  ; the silver searcher!
    anzu
    bbdb
    company
    color-identifiers-mode
    dired-details
    smex
    thrift
    diminish
    elpy
    ;; crontab-mode
    gitconfig-mode
    gitignore-mode
    htmlize

    ;; helm-rtags
    ;; company-rtags
    ;; flycheck-rtags

    company-flow

    auto-complete
    exec-path-from-shell

    flycheck

    go-mode
    go-eldoc
    go-autocomplete
    go-rename
    go-guru

    helm-c-yasnippet
    helm-company
    helm-css-scss
    helm-descbinds
    helm-describe-modes
    helm-flx
    helm-flycheck
    helm-orgcard
    helm-projectile
    helm-pydoc
    helm-unicode

    markdown-mode

    js-comint
    js2-refactor
    json-mode
    coffee-mode

    yaml-mode
    google-c-style
    multiple-cursors
    magit
    nose
    popwin
    projectile
    rainbow-mode
    rainbow-delimiters
    tangotango-theme
    web-mode

    whitespace-cleanup-mode
    wanderlust
    org-pomodoro
    ))

(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+end_src

* System Stuff

** Adding some paths
   Ensuring that some common paths are included. This may not be
   necessary, but sometimes Macs can be tricky.
#+begin_src emacs-lisp :tangle yes
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "~/.local/bin")
#+end_src

* Appearance
** Frame Titles
#+begin_src emacs-lisp :tangle yes
(setq frame-title-format (concat  "%b - emacs@" system-name))
#+end_src
** Fonts
 Install fonts from my .emacs.d into system locations
#+begin_src emacs-lisp :tangle yes
(defun jallen-install-font ()
  "copy my font files into the system-specific location"
  (let ((fonts-source "~/.emacs.d/Input_Fonts/"))
    (if (string-equal system-type "darwin")
        (copy-directory fonts-source "~/Library/Fonts/") ; Mac
      (copy-directory fonts-source "~/.fonts/") ; Linux
      )
    ))

(add-hook 'before-make-frame-hook
          (lambda ()
            (if (-any '(lambda (fonts) (string-prefix-p "-*-Input " (elt fonts 6))) (x-family-fonts))
                (jallen-install-font))))
#+end_src

Define some shortcuts for sizes that I use sometimes
#+begin_src emacs-lisp :tangle yes
(defun jallen-font () (interactive)
       (set-frame-font "Input Mono Narrow-16"))
(defun jallen-font-no-contacts () (interactive)
       (set-frame-font "Input Mono Narrow-22"))
(defun jallen-blind () (interactive)
       (set-frame-font "Input Mono Narrow-30"))
#+end_src
** Frame Configuration
#+begin_src emacs-lisp :tangle yes
(setq default-frame-alist
      (quote
       ((left-fringe . 1)
        (right-fringe . 1)
        (menu-bar-lines . 0)
        (tool-bar-lines . 0)
        (font . "Input Mono Narrow-16")
        )))
#+end_src
** Theme
   I love tangotango
#+begin_src emacs-lisp :tangle yes
(use-package tangotango-theme
  :config (load-theme 'tangotango t))
#+end_src
** Whitespace
   I don't highlight trailing whitespace, because I auto-kill it anyway
#+begin_src emacs-lisp :tangle yes
(setq-default show-trailing-whitespace nil)
#+end_src


** Uniqify Buffer Names
   TODO make this lazy load maybe?
#+begin_src emacs-lisp :tangle yes
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse
      uniquify-separator "|"
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")
#+end_src
** Jallen Face
   My own name deserves to be seen
#+begin_src emacs-lisp :tangle yes
(make-face 'my-name-face)
(set-face-foreground 'my-name-face "#000000")
(set-face-background 'my-name-face "#ffff10")

(add-hook 'font-lock-mode-hook 'highlight-my-name)
(defun highlight-my-name () ""
       (font-lock-add-keywords nil '(("jallen" (0 'my-name-face t)))))
#+end_src
** Turn off nux and noisy UI
#+begin_src emacs-lisp :tangle yes
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+end_src
* Awesome Key Bindings
** Multiple Cursors
#+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind
  (("M-c" . mc/edit-lines)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

* Modes
** CSS
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode
  :delight)

(use-package css-mode
  :mode "\\.css$"
  :config
  (setq css-indent-level 2
        css-indent-offset 2)
  (add-hook 'css-mode-hook 'rainbow-mode)
)
#+end_src
** ediff

Add a special command line switch to emacs so that we can easily use
emacs as our diff tool.

#+BEGIN_SRC bash
emacs -diff file1 file2
#+END_SRC

#+begin_src emacs-lisp :tangle yes
(defun command-line-diff (switch)
  (let ((file1 (pop command-line-args-left))
        (file2 (pop command-line-args-left)))
    (ediff file1 file2)))

(add-to-list 'command-switch-alist '("diff" . command-line-diff))

(add-hook 'ediff-load-hook
          (lambda ()
            (message "getting my diff onnnnn")
            (flycheck-mode nil)
            (setq ediff-highlight-all-diffs nil)
            (set-face-background
             ediff-current-diff-face-A "#1e2424")
            (set-face-background
             ediff-current-diff-face-B "#1e2424")
            (set-face-background
             ediff-current-diff-face-C "#1e2424")
            (make-face-italic
             ediff-current-diff-face-A)
            (make-face-italic
             ediff-current-diff-face-B)
            (make-face-italic
             ediff-current-diff-face-C)))
#+end_src
** YAML
Enable =yaml-mode=
#+begin_src emacs-lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml$" "\\.yaml$" "\\.lock$")
  :config
  (add-hook 'yaml-mode-hook 'flycheck-mode)
  (add-hook 'yaml-mode-hook 'flyspell-mode))
#+end_src
